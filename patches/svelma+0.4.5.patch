diff --git a/node_modules/svelma/src/components/Field.svelte b/node_modules/svelma/src/components/Field.svelte
index 84bb0fb..d2f7056 100644
--- a/node_modules/svelma/src/components/Field.svelte
+++ b/node_modules/svelma/src/components/Field.svelte
@@ -1,75 +1,78 @@
-<script>
-  import { onMount, setContext } from 'svelte'
-  import { omit } from '../utils'
+<script lang="ts">
+  import { onMount, setContext } from 'svelte';
+  import { omit } from '../utils';
 
   /** Type (color) of the field and help message. Also adds a matching icon.
    * @svelte-prop {String} [type]
    * @values $$colors$$
    * */
-  export let type = ''
+  export let type = '';
 
   /** Label for input
    * @svelte-prop {String} [label]
    * */
-  export let label = null
+  export let label: string = null;
 
   /** Same as native <code>for</code> on label
    * @svelte-prop {String} [labelFor]
    * */
-  export let labelFor = ''
+  export let labelFor = '';
 
   /** Message to show beneath input
    * @svelte-prop {String} [message]
    * */
-  export let message = ''
+  export let message = '';
 
   /** Direct child components/elements of Field will be grouped horizontally
    * @svelte-prop {Boolean} grouped=false
    * */
-  export let grouped = false
+  export let grouped = false;
 
   /** Allow grouped controls to cover multiple lines
    * @svelte-prop {Boolean} groupMultiline=false
    * */
-  export let groupMultiline = false
+  export let groupMultiline = false;
 
   /** Alter the alignment of the field
    * @svelte-prop {String} [position]
    * @values is-centered, is-right
    * */
-  export let position = ''
+  export let position = '';
 
   /** Automatically attach child controls together
    * @svelte-prop {Boolean} addons=true
    * */
-  export let addons = true
+  export let addons = true;
 
-  export let expanded = false
+  export let expanded = false;
 
-  setContext('type', () => type)
+  setContext('type', () => type);
 
-  let el
-  let labelEl
-  let messageEl
-  let fieldType = ''
-  let hasIcons = false
-  let iconType = ''
-  let mounted = false
-  let newPosition = ''
+  let el;
+  let labelEl;
+  let messageEl;
+  let fieldType = '';
+  let hasIcons = false;
+  let iconType = '';
+  let mounted = false;
+  let newPosition = '';
 
   // Determine the icon type
   $: {
     if (['is-danger', 'is-success'].includes(type)) {
-      iconType = type
+      iconType = type;
     }
   }
 
   $: {
-    if (grouped) fieldType = 'is-grouped'
+    if (grouped) fieldType = 'is-grouped';
     else if (mounted) {
-      const childNodes = Array.prototype.filter.call(el.children, c => !([labelEl, messageEl].includes(c)))
+      const childNodes = Array.prototype.filter.call(
+        el.children,
+        (c) => ![labelEl, messageEl].includes(c)
+      );
       if (childNodes.length > 1 && addons) {
-        fieldType = 'has-addons'
+        fieldType = 'has-addons';
       }
     }
   }
@@ -77,19 +80,31 @@
   // Update has-addons-* or is-grouped-* classes based on position prop
   $: {
     if (position) {
-      const pos = position.split('-')
+      const pos = position.split('-');
       if (pos.length >= 1) {
-        const prefix = grouped ? 'is-grouped-' : 'has-addons-'
-        newPosition = prefix + pos[1]
+        const prefix = grouped ? 'is-grouped-' : 'has-addons-';
+        newPosition = prefix + pos[1];
       }
     }
   }
 
-  $: props = { ...omit($$props, 'addons', 'class', 'expanded', 'grouped', 'label', 'labelFor', 'position', 'type') }
+  $: props = {
+    ...omit(
+      $$props,
+      'addons',
+      'class',
+      'expanded',
+      'grouped',
+      'label',
+      'labelFor',
+      'position',
+      'type'
+    ),
+  };
 
   onMount(() => {
-    mounted = true
-  })
+    mounted = true;
+  });
 </script>
 
 <style lang="scss">
@@ -111,7 +126,13 @@
   }
 </style>
 
-<div {...props} class="field {type} {fieldType} {newPosition} {$$props.class || ''}" class:is-expanded={expanded} class:is-grouped-multiline={groupMultiline} bind:this={el}>
+<div
+  {...props}
+  class="field {type} {fieldType} {newPosition} {$$props.class || ''}"
+  class:is-expanded={expanded}
+  class:is-grouped-multiline={groupMultiline}
+  bind:this={el}
+>
   {#if label}
     <label for={labelFor} class="label" bind:this={labelEl}>{label}</label>
   {/if}
